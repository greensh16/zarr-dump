name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    name: Build Release Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: zarr-dump
            asset_name: zarr-dump-x86_64-linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: zarr-dump
            asset_name: zarr-dump-x86_64-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: zarr-dump
            asset_name: zarr-dump-aarch64-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: zarr-dump.exe
            asset_name: zarr-dump-x86_64-windows.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: zarr-dump
            asset_name: zarr-dump-x86_64-macos
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: zarr-dump
            asset_name: zarr-dump-aarch64-macos
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl tools (Linux musl only)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Install ARM64 cross-compilation toolchain (ARM64 Linux only)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          if command -v aarch64-linux-gnu-strip >/dev/null 2>&1; then
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          fi
        elif command -v strip >/dev/null 2>&1; then
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        fi

    - name: Create archive
      id: archive
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          echo "archive=${{ matrix.asset_name }}.zip" >> $GITHUB_OUTPUT
        else
          tar -czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          echo "archive=${{ matrix.asset_name }}.tar.gz" >> $GITHUB_OUTPUT
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ steps.archive.outputs.archive }}

  release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    permissions: write-all
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: v${{ steps.get_version.outputs.version }}
        body: |
          ## Changes in ${{ steps.get_version.outputs.version }}
          
          See [CHANGELOG.md](https://github.com/green/zarr-dump/blob/main/CHANGELOG.md) for details.
          
          ## Installation
          
          ### From cargo (recommended)
          
          ```bash
          cargo install zarr-dump
          ```
          
          ### Binary downloads
          
          Download the appropriate binary for your platform:
          
          | Platform | Architecture | Download |
          |----------|--------------|----------|
          | Linux | x86_64 | `zarr-dump-x86_64-linux.tar.gz` |
          | Linux (musl) | x86_64 | `zarr-dump-x86_64-linux-musl.tar.gz` |
          | Linux | ARM64 | `zarr-dump-aarch64-linux.tar.gz` |
          | macOS | x86_64 | `zarr-dump-x86_64-macos.tar.gz` |
          | macOS | ARM64 (Apple Silicon) | `zarr-dump-aarch64-macos.tar.gz` |
          | Windows | x86_64 | `zarr-dump-x86_64-windows.exe.zip` |
          
          ## Usage
          
          ```bash
          zarr-dump /path/to/zarr/store
          ```
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
        files: artifacts/*/*

  publish-crate:
    name: Publish to crates.io
    needs: [build-release]
    runs-on: ubuntu-latest
    if: "!contains(github.ref, '-')" # Only publish stable releases, not pre-releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Verify version matches tag
      run: |
        CARGO_VERSION=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
          echo "Version mismatch: Cargo.toml has $CARGO_VERSION but tag is $TAG_VERSION"
          exit 1
        fi

    - name: Run tests before publishing
      run: cargo test --all-targets

    - name: Publish to crates.io
      run: cargo publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
